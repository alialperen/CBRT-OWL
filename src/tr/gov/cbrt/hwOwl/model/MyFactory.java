package tr.gov.cbrt.hwOwl.model;

import tr.gov.cbrt.hwOwl.model.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Wed Dec 07 16:17:27 MSK 2016 by Alperen
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/Partner
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/Partner", Partner.class, DefaultPartner.class);
    }

    /**
     * Creates an instance of type Partner.  Modifies the underlying ontology.
     */
    public Partner createPartner(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARTNER, DefaultPartner.class);
    }

    /**
     * Gets an instance of type Partner with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Partner getPartner(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARTNER, DefaultPartner.class);
    }

    /**
     * Gets all instances of Partner from the ontology.
     */
    public Collection<? extends Partner> getAllPartnerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARTNER, DefaultPartner.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Accounting
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Accounting", Accounting.class, DefaultAccounting.class);
    }

    /**
     * Creates an instance of type Accounting.  Modifies the underlying ontology.
     */
    public Accounting createAccounting(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACCOUNTING, DefaultAccounting.class);
    }

    /**
     * Gets an instance of type Accounting with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Accounting getAccounting(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACCOUNTING, DefaultAccounting.class);
    }

    /**
     * Gets all instances of Accounting from the ontology.
     */
    public Collection<? extends Accounting> getAllAccountingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACCOUNTING, DefaultAccounting.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#AuditComminity
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#AuditComminity", AuditComminity.class, DefaultAuditComminity.class);
    }

    /**
     * Creates an instance of type AuditComminity.  Modifies the underlying ontology.
     */
    public AuditComminity createAuditComminity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AUDITCOMMINITY, DefaultAuditComminity.class);
    }

    /**
     * Gets an instance of type AuditComminity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AuditComminity getAuditComminity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AUDITCOMMINITY, DefaultAuditComminity.class);
    }

    /**
     * Gets all instances of AuditComminity from the ontology.
     */
    public Collection<? extends AuditComminity> getAllAuditComminityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AUDITCOMMINITY, DefaultAuditComminity.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Banking
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Banking", Banking.class, DefaultBanking.class);
    }

    /**
     * Creates an instance of type Banking.  Modifies the underlying ontology.
     */
    public Banking createBanking(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BANKING, DefaultBanking.class);
    }

    /**
     * Gets an instance of type Banking with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Banking getBanking(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BANKING, DefaultBanking.class);
    }

    /**
     * Gets all instances of Banking from the ontology.
     */
    public Collection<? extends Banking> getAllBankingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BANKING, DefaultBanking.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Banknote
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Banknote", Banknote.class, DefaultBanknote.class);
    }

    /**
     * Creates an instance of type Banknote.  Modifies the underlying ontology.
     */
    public Banknote createBanknote(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BANKNOTE, DefaultBanknote.class);
    }

    /**
     * Gets an instance of type Banknote with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Banknote getBanknote(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BANKNOTE, DefaultBanknote.class);
    }

    /**
     * Gets all instances of Banknote from the ontology.
     */
    public Collection<? extends Banknote> getAllBanknoteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BANKNOTE, DefaultBanknote.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Board
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Board", Board.class, DefaultBoard.class);
    }

    /**
     * Creates an instance of type Board.  Modifies the underlying ontology.
     */
    public Board createBoard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOARD, DefaultBoard.class);
    }

    /**
     * Gets an instance of type Board with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Board getBoard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOARD, DefaultBoard.class);
    }

    /**
     * Gets all instances of Board from the ontology.
     */
    public Collection<? extends Board> getAllBoardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOARD, DefaultBoard.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Branches
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Branches", Branches.class, DefaultBranches.class);
    }

    /**
     * Creates an instance of type Branches.  Modifies the underlying ontology.
     */
    public Branches createBranches(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BRANCHES, DefaultBranches.class);
    }

    /**
     * Gets an instance of type Branches with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Branches getBranches(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BRANCHES, DefaultBranches.class);
    }

    /**
     * Gets all instances of Branches from the ontology.
     */
    public Collection<? extends Branches> getAllBranchesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BRANCHES, DefaultBranches.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Business
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Business", Business.class, DefaultBusiness.class);
    }

    /**
     * Creates an instance of type Business.  Modifies the underlying ontology.
     */
    public Business createBusiness(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUSINESS, DefaultBusiness.class);
    }

    /**
     * Gets an instance of type Business with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Business getBusiness(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUSINESS, DefaultBusiness.class);
    }

    /**
     * Gets all instances of Business from the ontology.
     */
    public Collection<? extends Business> getAllBusinessInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUSINESS, DefaultBusiness.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Comminication
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Comminication", Comminication.class, DefaultComminication.class);
    }

    /**
     * Creates an instance of type Comminication.  Modifies the underlying ontology.
     */
    public Comminication createComminication(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMINICATION, DefaultComminication.class);
    }

    /**
     * Gets an instance of type Comminication with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Comminication getComminication(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMINICATION, DefaultComminication.class);
    }

    /**
     * Gets all instances of Comminication from the ontology.
     */
    public Collection<? extends Comminication> getAllComminicationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMINICATION, DefaultComminication.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#ComminityMember
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#ComminityMember", ComminityMember.class, DefaultComminityMember.class);
    }

    /**
     * Creates an instance of type ComminityMember.  Modifies the underlying ontology.
     */
    public ComminityMember createComminityMember(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMINITYMEMBER, DefaultComminityMember.class);
    }

    /**
     * Gets an instance of type ComminityMember with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ComminityMember getComminityMember(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMINITYMEMBER, DefaultComminityMember.class);
    }

    /**
     * Gets all instances of ComminityMember from the ontology.
     */
    public Collection<? extends ComminityMember> getAllComminityMemberInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMINITYMEMBER, DefaultComminityMember.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Corporation
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Corporation", Corporation.class, DefaultCorporation.class);
    }

    /**
     * Creates an instance of type Corporation.  Modifies the underlying ontology.
     */
    public Corporation createCorporation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CORPORATION, DefaultCorporation.class);
    }

    /**
     * Gets an instance of type Corporation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Corporation getCorporation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CORPORATION, DefaultCorporation.class);
    }

    /**
     * Gets all instances of Corporation from the ontology.
     */
    public Collection<? extends Corporation> getAllCorporationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CORPORATION, DefaultCorporation.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Department
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Department", Department.class, DefaultDepartment.class);
    }

    /**
     * Creates an instance of type Department.  Modifies the underlying ontology.
     */
    public Department createDepartment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }

    /**
     * Gets an instance of type Department with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Department getDepartment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }

    /**
     * Gets all instances of Department from the ontology.
     */
    public Collection<? extends Department> getAllDepartmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#DeputyGovernor
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#DeputyGovernor", DeputyGovernor.class, DefaultDeputyGovernor.class);
    }

    /**
     * Creates an instance of type DeputyGovernor.  Modifies the underlying ontology.
     */
    public DeputyGovernor createDeputyGovernor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEPUTYGOVERNOR, DefaultDeputyGovernor.class);
    }

    /**
     * Gets an instance of type DeputyGovernor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DeputyGovernor getDeputyGovernor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEPUTYGOVERNOR, DefaultDeputyGovernor.class);
    }

    /**
     * Gets all instances of DeputyGovernor from the ontology.
     */
    public Collection<? extends DeputyGovernor> getAllDeputyGovernorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEPUTYGOVERNOR, DefaultDeputyGovernor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#ExecutiveComminity
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#ExecutiveComminity", ExecutiveComminity.class, DefaultExecutiveComminity.class);
    }

    /**
     * Creates an instance of type ExecutiveComminity.  Modifies the underlying ontology.
     */
    public ExecutiveComminity createExecutiveComminity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXECUTIVECOMMINITY, DefaultExecutiveComminity.class);
    }

    /**
     * Gets an instance of type ExecutiveComminity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ExecutiveComminity getExecutiveComminity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXECUTIVECOMMINITY, DefaultExecutiveComminity.class);
    }

    /**
     * Gets all instances of ExecutiveComminity from the ontology.
     */
    public Collection<? extends ExecutiveComminity> getAllExecutiveComminityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXECUTIVECOMMINITY, DefaultExecutiveComminity.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#GeneralAssembly
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#GeneralAssembly", GeneralAssembly.class, DefaultGeneralAssembly.class);
    }

    /**
     * Creates an instance of type GeneralAssembly.  Modifies the underlying ontology.
     */
    public GeneralAssembly createGeneralAssembly(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GENERALASSEMBLY, DefaultGeneralAssembly.class);
    }

    /**
     * Gets an instance of type GeneralAssembly with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GeneralAssembly getGeneralAssembly(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GENERALASSEMBLY, DefaultGeneralAssembly.class);
    }

    /**
     * Gets all instances of GeneralAssembly from the ontology.
     */
    public Collection<? extends GeneralAssembly> getAllGeneralAssemblyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GENERALASSEMBLY, DefaultGeneralAssembly.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Governor
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Governor", Governor.class, DefaultGovernor.class);
    }

    /**
     * Creates an instance of type Governor.  Modifies the underlying ontology.
     */
    public Governor createGovernor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GOVERNOR, DefaultGovernor.class);
    }

    /**
     * Gets an instance of type Governor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Governor getGovernor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GOVERNOR, DefaultGovernor.class);
    }

    /**
     * Gets all instances of Governor from the ontology.
     */
    public Collection<? extends Governor> getAllGovernorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GOVERNOR, DefaultGovernor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#HumanResources
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#HumanResources", HumanResources.class, DefaultHumanResources.class);
    }

    /**
     * Creates an instance of type HumanResources.  Modifies the underlying ontology.
     */
    public HumanResources createHumanResources(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HUMANRESOURCES, DefaultHumanResources.class);
    }

    /**
     * Gets an instance of type HumanResources with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HumanResources getHumanResources(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HUMANRESOURCES, DefaultHumanResources.class);
    }

    /**
     * Gets all instances of HumanResources from the ontology.
     */
    public Collection<? extends HumanResources> getAllHumanResourcesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HUMANRESOURCES, DefaultHumanResources.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#IT
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#IT", IT.class, DefaultIT.class);
    }

    /**
     * Creates an instance of type IT.  Modifies the underlying ontology.
     */
    public IT createIT(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IT, DefaultIT.class);
    }

    /**
     * Gets an instance of type IT with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IT getIT(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IT, DefaultIT.class);
    }

    /**
     * Gets all instances of IT from the ontology.
     */
    public Collection<? extends IT> getAllITInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IT, DefaultIT.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Intern
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Intern", Intern.class, DefaultIntern.class);
    }

    /**
     * Creates an instance of type Intern.  Modifies the underlying ontology.
     */
    public Intern createIntern(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INTERN, DefaultIntern.class);
    }

    /**
     * Gets an instance of type Intern with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Intern getIntern(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INTERN, DefaultIntern.class);
    }

    /**
     * Gets all instances of Intern from the ontology.
     */
    public Collection<? extends Intern> getAllInternInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INTERN, DefaultIntern.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Legal
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Legal", Legal.class, DefaultLegal.class);
    }

    /**
     * Creates an instance of type Legal.  Modifies the underlying ontology.
     */
    public Legal createLegal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEGAL, DefaultLegal.class);
    }

    /**
     * Gets an instance of type Legal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Legal getLegal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEGAL, DefaultLegal.class);
    }

    /**
     * Gets all instances of Legal from the ontology.
     */
    public Collection<? extends Legal> getAllLegalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEGAL, DefaultLegal.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Logistic
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Logistic", Logistic.class, DefaultLogistic.class);
    }

    /**
     * Creates an instance of type Logistic.  Modifies the underlying ontology.
     */
    public Logistic createLogistic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOGISTIC, DefaultLogistic.class);
    }

    /**
     * Gets an instance of type Logistic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Logistic getLogistic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOGISTIC, DefaultLogistic.class);
    }

    /**
     * Gets all instances of Logistic from the ontology.
     */
    public Collection<? extends Logistic> getAllLogisticInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOGISTIC, DefaultLogistic.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#MPC
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#MPC", MPC.class, DefaultMPC.class);
    }

    /**
     * Creates an instance of type MPC.  Modifies the underlying ontology.
     */
    public MPC createMPC(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MPC, DefaultMPC.class);
    }

    /**
     * Gets an instance of type MPC with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MPC getMPC(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MPC, DefaultMPC.class);
    }

    /**
     * Gets all instances of MPC from the ontology.
     */
    public Collection<? extends MPC> getAllMPCInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MPC, DefaultMPC.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#MPCdecision
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#MPCdecision", MPCdecision.class, DefaultMPCdecision.class);
    }

    /**
     * Creates an instance of type MPCdecision.  Modifies the underlying ontology.
     */
    public MPCdecision createMPCdecision(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MPCDECISION, DefaultMPCdecision.class);
    }

    /**
     * Gets an instance of type MPCdecision with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MPCdecision getMPCdecision(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MPCDECISION, DefaultMPCdecision.class);
    }

    /**
     * Gets all instances of MPCdecision from the ontology.
     */
    public Collection<? extends MPCdecision> getAllMPCdecisionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MPCDECISION, DefaultMPCdecision.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#NonProfit
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#NonProfit", NonProfit.class, DefaultNonProfit.class);
    }

    /**
     * Creates an instance of type NonProfit.  Modifies the underlying ontology.
     */
    public NonProfit createNonProfit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONPROFIT, DefaultNonProfit.class);
    }

    /**
     * Gets an instance of type NonProfit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NonProfit getNonProfit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONPROFIT, DefaultNonProfit.class);
    }

    /**
     * Gets all instances of NonProfit from the ontology.
     */
    public Collection<? extends NonProfit> getAllNonProfitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONPROFIT, DefaultNonProfit.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Organization
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Organization", Organization.class, DefaultOrganization.class);
    }

    /**
     * Creates an instance of type Organization.  Modifies the underlying ontology.
     */
    public Organization createOrganization(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ORGANIZATION, DefaultOrganization.class);
    }

    /**
     * Gets an instance of type Organization with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Organization getOrganization(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ORGANIZATION, DefaultOrganization.class);
    }

    /**
     * Gets all instances of Organization from the ontology.
     */
    public Collection<? extends Organization> getAllOrganizationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ORGANIZATION, DefaultOrganization.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Partnership
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Partnership", Partnership.class, DefaultPartnership.class);
    }

    /**
     * Creates an instance of type Partnership.  Modifies the underlying ontology.
     */
    public Partnership createPartnership(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARTNERSHIP, DefaultPartnership.class);
    }

    /**
     * Gets an instance of type Partnership with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Partnership getPartnership(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARTNERSHIP, DefaultPartnership.class);
    }

    /**
     * Gets all instances of Partnership from the ontology.
     */
    public Collection<? extends Partnership> getAllPartnershipInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARTNERSHIP, DefaultPartnership.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#PaymentSystems
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#PaymentSystems", PaymentSystems.class, DefaultPaymentSystems.class);
    }

    /**
     * Creates an instance of type PaymentSystems.  Modifies the underlying ontology.
     */
    public PaymentSystems createPaymentSystems(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PAYMENTSYSTEMS, DefaultPaymentSystems.class);
    }

    /**
     * Gets an instance of type PaymentSystems with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PaymentSystems getPaymentSystems(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PAYMENTSYSTEMS, DefaultPaymentSystems.class);
    }

    /**
     * Gets all instances of PaymentSystems from the ontology.
     */
    public Collection<? extends PaymentSystems> getAllPaymentSystemsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PAYMENTSYSTEMS, DefaultPaymentSystems.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Person
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Private
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Private", Private.class, DefaultPrivate.class);
    }

    /**
     * Creates an instance of type Private.  Modifies the underlying ontology.
     */
    public Private createPrivate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRIVATE, DefaultPrivate.class);
    }

    /**
     * Gets an instance of type Private with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Private getPrivate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRIVATE, DefaultPrivate.class);
    }

    /**
     * Gets all instances of Private from the ontology.
     */
    public Collection<? extends Private> getAllPrivateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRIVATE, DefaultPrivate.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Product
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Product", Product.class, DefaultProduct.class);
    }

    /**
     * Creates an instance of type Product.  Modifies the underlying ontology.
     */
    public Product createProduct(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRODUCT, DefaultProduct.class);
    }

    /**
     * Gets an instance of type Product with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Product getProduct(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRODUCT, DefaultProduct.class);
    }

    /**
     * Gets all instances of Product from the ontology.
     */
    public Collection<? extends Product> getAllProductInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRODUCT, DefaultProduct.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Public
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Public", Public.class, DefaultPublic.class);
    }

    /**
     * Creates an instance of type Public.  Modifies the underlying ontology.
     */
    public Public createPublic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PUBLIC, DefaultPublic.class);
    }

    /**
     * Gets an instance of type Public with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Public getPublic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PUBLIC, DefaultPublic.class);
    }

    /**
     * Gets all instances of Public from the ontology.
     */
    public Collection<? extends Public> getAllPublicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PUBLIC, DefaultPublic.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Research
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Research", Research.class, DefaultResearch.class);
    }

    /**
     * Creates an instance of type Research.  Modifies the underlying ontology.
     */
    public Research createResearch(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESEARCH, DefaultResearch.class);
    }

    /**
     * Gets an instance of type Research with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Research getResearch(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESEARCH, DefaultResearch.class);
    }

    /**
     * Gets all instances of Research from the ontology.
     */
    public Collection<? extends Research> getAllResearchInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESEARCH, DefaultResearch.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Service
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Service", Service.class, DefaultService.class);
    }

    /**
     * Creates an instance of type Service.  Modifies the underlying ontology.
     */
    public Service createService(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SERVICE, DefaultService.class);
    }

    /**
     * Gets an instance of type Service with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Service getService(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SERVICE, DefaultService.class);
    }

    /**
     * Gets all instances of Service from the ontology.
     */
    public Collection<? extends Service> getAllServiceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SERVICE, DefaultService.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Staff
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Staff", Staff.class, DefaultStaff.class);
    }

    /**
     * Creates an instance of type Staff.  Modifies the underlying ontology.
     */
    public Staff createStaff(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STAFF, DefaultStaff.class);
    }

    /**
     * Gets an instance of type Staff with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Staff getStaff(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STAFF, DefaultStaff.class);
    }

    /**
     * Gets all instances of Staff from the ontology.
     */
    public Collection<? extends Staff> getAllStaffInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STAFF, DefaultStaff.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#StatisticalBroadcast
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#StatisticalBroadcast", StatisticalBroadcast.class, DefaultStatisticalBroadcast.class);
    }

    /**
     * Creates an instance of type StatisticalBroadcast.  Modifies the underlying ontology.
     */
    public StatisticalBroadcast createStatisticalBroadcast(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATISTICALBROADCAST, DefaultStatisticalBroadcast.class);
    }

    /**
     * Gets an instance of type StatisticalBroadcast with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StatisticalBroadcast getStatisticalBroadcast(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATISTICALBROADCAST, DefaultStatisticalBroadcast.class);
    }

    /**
     * Gets all instances of StatisticalBroadcast from the ontology.
     */
    public Collection<? extends StatisticalBroadcast> getAllStatisticalBroadcastInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATISTICALBROADCAST, DefaultStatisticalBroadcast.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/tp11501203/owl/ontology#Statistics
     */

    {
        javaMapping.add("http://www.semanticweb.org/tp11501203/owl/ontology#Statistics", Statistics.class, DefaultStatistics.class);
    }

    /**
     * Creates an instance of type Statistics.  Modifies the underlying ontology.
     */
    public Statistics createStatistics(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATISTICS, DefaultStatistics.class);
    }

    /**
     * Gets an instance of type Statistics with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Statistics getStatistics(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATISTICS, DefaultStatistics.class);
    }

    /**
     * Gets all instances of Statistics from the ontology.
     */
    public Collection<? extends Statistics> getAllStatisticsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATISTICS, DefaultStatistics.class);
    }


}
